package knapsack.problem;

import javax.swing.*;
import javax.swing.border.TitledBorder;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

public class KnapsackGUI {
    private JPanel panel1;
    private JTextField numberOfItemsField;
    private JTextField seedField;
    private JTextField capacityField;
    private JTextArea problemTextArea;
    private JTextArea resultTextArea;
    private JButton solveButton;

    public KnapsackGUI() {
        $$$setupUI$$$();
        solveButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                if (validateInput()) {
                    int numberOfItems = Integer.parseInt(numberOfItemsField.getText());
                    int seed = Integer.parseInt(seedField.getText());
                    int capacity = Integer.parseInt(capacityField.getText());
                    int lowerBound = 1;
                    int upperBound = 10;

                    Problem problem = new Problem(numberOfItems, seed, lowerBound, upperBound);
                    problemTextArea.setText(problem.toString());
                    Result result = problem.solve(capacity);

                    resultTextArea.setText(result.toString());
                }
            }
        });
    }

    private boolean validateInput() {
        try {
            int numberOfItems = Integer.parseInt(numberOfItemsField.getText());
            int seed = Integer.parseInt(seedField.getText());
            int capacity = Integer.parseInt(capacityField.getText());

            if (numberOfItems <= 0 || seed < 0 || capacity <= 0) {
                JOptionPane.showMessageDialog(panel1, "Please enter positive numbers for all fields.", "Input Error", JOptionPane.ERROR_MESSAGE);
                return false;
            }
        } catch (NumberFormatException ex) {
            JOptionPane.showMessageDialog(panel1, "Please enter valid integers.", "Input Error", JOptionPane.ERROR_MESSAGE);
            return false;
        }
        return true;
    }

    public static void main(String[] args) {
        JFrame frame = new JFrame("Knapsack Problem Solver");
        frame.setContentPane(new KnapsackGUI().panel1);
        frame.setPreferredSize(new Dimension(800, 500));
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.pack();
        frame.setVisible(true);
    }

    private void createUIComponents() {
        // Custom component creation
        numberOfItemsField = new JTextField(10);
        seedField = new JTextField(10);
        capacityField = new JTextField(10);
        problemTextArea = new JTextArea(10, 20);
        problemTextArea.setEditable(false);
        problemTextArea.setLineWrap(true);
        problemTextArea.setWrapStyleWord(true);
        resultTextArea = new JTextArea(10, 10);
        resultTextArea.setEditable(false);
        resultTextArea.setLineWrap(true);
        resultTextArea.setWrapStyleWord(true);
        solveButton = new JButton("Solve");

        // Set font for the labels and button
        Font font = new Font("Arial", Font.PLAIN, 14);
        solveButton.setFont(font);

        // Add some margin and border
        numberOfItemsField.setBorder(BorderFactory.createCompoundBorder(
                numberOfItemsField.getBorder(), BorderFactory.createEmptyBorder(5, 5, 5, 5)));
        seedField.setBorder(BorderFactory.createCompoundBorder(
                seedField.getBorder(), BorderFactory.createEmptyBorder(5, 5, 5, 5)));
        capacityField.setBorder(BorderFactory.createCompoundBorder(
                capacityField.getBorder(), BorderFactory.createEmptyBorder(5, 5, 5, 5)));
        problemTextArea.setBorder(BorderFactory.createCompoundBorder(
                problemTextArea.getBorder(), BorderFactory.createEmptyBorder(10, 10, 10, 10)));
        resultTextArea.setBorder(BorderFactory.createCompoundBorder(
                resultTextArea.getBorder(), BorderFactory.createEmptyBorder(10, 10, 10, 10)));
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        createUIComponents();
        panel1 = new JPanel();
        panel1.setLayout(new GridBagLayout());
        panel1.setBackground(new Color(245, 245, 245));

        GridBagConstraints gbc = new GridBagConstraints();
        gbc.insets = new Insets(10, 10, 10, 10);
        gbc.anchor = GridBagConstraints.WEST;

        JPanel inputPanel = new JPanel(new GridBagLayout());
        inputPanel.setBorder(BorderFactory.createTitledBorder(
                BorderFactory.createEtchedBorder(), "Input Parameters", TitledBorder.LEFT, TitledBorder.TOP));
        inputPanel.setBackground(new Color(255, 255, 255));

        JLabel label1 = new JLabel("Number of Items:");
        gbc.gridx = 0;
        gbc.gridy = 0;
        inputPanel.add(label1, gbc);

        gbc.gridx = 1;
        gbc.gridy = 0;
        inputPanel.add(numberOfItemsField, gbc);

        JLabel label2 = new JLabel("Seed:");
        gbc.gridx = 0;
        gbc.gridy = 1;
        inputPanel.add(label2, gbc);

        gbc.gridx = 1;
        gbc.gridy = 1;
        inputPanel.add(seedField, gbc);

        JLabel label3 = new JLabel("Knapsack Capacity:");
        gbc.gridx = 0;
        gbc.gridy = 2;
        inputPanel.add(label3, gbc);

        gbc.gridx = 1;
        gbc.gridy = 2;
        inputPanel.add(capacityField, gbc);

        gbc.gridx = 1;
        gbc.gridy = 3;
        inputPanel.add(solveButton, gbc);

        gbc.gridx = 0;
        gbc.gridy = 0;
        gbc.gridwidth = 2;
        panel1.add(inputPanel, gbc);

        JScrollPane problemScrollPane = new JScrollPane(problemTextArea);
        problemScrollPane.setBorder(BorderFactory.createTitledBorder(
                BorderFactory.createEtchedBorder(), "Problem Instance", TitledBorder.LEFT, TitledBorder.TOP));

        gbc.gridx = 0;
        gbc.gridy = 1;
        gbc.gridwidth = 2;
        gbc.fill = GridBagConstraints.BOTH;
        gbc.weightx = 1.0;
        gbc.weighty = 1.0;
        panel1.add(problemScrollPane, gbc);

        JScrollPane resultScrollPane = new JScrollPane(resultTextArea);
        resultScrollPane.setBorder(BorderFactory.createTitledBorder(
                BorderFactory.createEtchedBorder(), "Result", TitledBorder.LEFT, TitledBorder.TOP));

        gbc.gridx = 0;
        gbc.gridy = 2;
        gbc.gridwidth = 2;
        gbc.fill = GridBagConstraints.BOTH;
        gbc.weightx = 1.0;
        gbc.weighty = 1.0;
        panel1.add(resultScrollPane, gbc);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return panel1;
    }
}